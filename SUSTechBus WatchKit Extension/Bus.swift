//
//  Bus.swift
//  SUSTechBus WatchKit Extension
//
//  Created by 石文轩 on 2020/6/17.
//  Copyright © 2020 石文轩. All rights reserved.
//

import Foundation

struct Bus {
    let XinYuan: [String] = ["07:20", "07:25", "07:30", "07:35", "07:40", "07:43", "07:46", "07:50", "07:55", "08:00", "08:03", "08:06", "08:10", "08:15", "08:19", "08:22", "08:25", "08:28", "08:34", "08:38", "08:42", "08:45", "08:48", "08:52", "08:55", "08:58", "09:02", "09:05", "09:10", "09:15", "09:20", "09:25", "09:30", "09:40", "09:45", "09:50", "09:55", "09:55", "10:00", "10:05", "10:05", "10:10", "10:20", "10:25", "10:30", "10:40", "10:45", "10:50", "11:00", "11:15", "11:30", "11:40", "11:45", "11:50", "12:00", "12:05", "12:10", "12:16", "12:19", "12:20", "12:25", "12:30", "12:36", "12:40", "12:45", "12:50", "12:55", "13:00", "13:15", "13:30", "13:40", "13:45", "13:50", "13:56", "13:59", "14:00", "14:10", "14:15", "14:20", "14:30", "14:40", "14:50", "15:00", "15:10", "15:20", "15:40", "15:50", "16:00", "16:06", "16:10", "16:20", "16:30", "16:45", "17:00", "17:10", "17:20", "17:30", "17:40", "17:50", "18:00", "18:06", "18:10", "18:16", "18:20", "18:20", "18:25", "18:30", "18:40", "18:45", "18:50", "19:00", "19:20", "19:40", "19:50", "20:00", "20:20", "20:40", "20:55", "21:00", "21:03", "21:20", "21:58", "22:00", "22:00", "22:10", "22:30"]
    let KeYanLou: [String] = ["07:00", "07:05", "07:10", "07:15", "07:20", "07:23", "07:26", "07:29", "07:32", "07:36", "07:41", "07:44", "07:47", "07:50", "07:55", "08:00", "08:05", "08:08", "08:10", "08:15", "08:20", "08:23", "08:25", "08:30", "08:35", "08:37", "08:40", "08:45", "08:50", "08:55", "08:57", "09:00", "09:05", "09:15", "09:20", "09:25", "09:30", "09:35", "09:40", "09:43", "09:46", "09:50", "09:53", "09:56", "10:00", "10:10", "10:20", "10:25", "10:30", "10:40", "10:50", "11:00", "11:10", "11:15", "11:30", "11:45", "11:50", "11:55", "12:00", "12:05", "12:10", "12:16", "12:20", "12:23", "12:26", "12:30", "12:35", "12:40", "12:50", "13:00", "13:15", "13:20", "13:25", "13:30", "13:36", "13:40", "13:40", "13:45", "13:50", "13:55", "14:00", "14:15", "14:30", "14:40", "14:50", "15:00", "15:15", "15:30", "15:40", "15:50", "15:53", "16:00", "16:05", "16:10", "16:20", "16:40", "16:50", "17:00", "17:15", "17:20", "17:30", "17:35", "17:40", "17:42", "17:45", "17:50", "17:55", "18:00", "18:05", "18:10", "18:15", "18:20", "18:25", "18:25", "18:30", "18:35", "18:40", "18:45", "18:50", "19:00", "19:10", "19:20", "19:30", "19:45", "20:00", "20:20", "20:30", "20:40", "21:00", "21:20", "21:30", "21:40"]
    let XinYuanHoliday: [String] = ["07:20", "07:40", "08:00", "08:20", "08:40", "09:00", "09:20", "09:40", "10:00", "10:20", "10:40", "11:00", "11:20", "11:40", "12:00", "12:20", "12:40", "13:00", "13:20", "13:40", "14:00", "14:20", "14:40", "15:00", "15:20", "15:40", "16:00", "16:20", "16:40", "17:00", "17:20", "17:40", "18:00", "18:20", "18:40", "19:00", "19:20", "19:40", "20:00", "20:20", "20:40", "21:00", "21:20", "21:40", "22:00", "20:20"]
    let KeYanLouHoliday: [String] = ["07:00", "07:20", "07:40", "08:00", "08:20", "08:40", "09:00", "09:20", "09:40", "10:00", "10:20", "10:40", "11:00", "11:20", "11:40", "12:00", "12:20", "12:40", "13:00", "13:20", "13:40", "14:00", "14:20", "14:40", "15:00", "15:20", "15:40", "16:00", "16:20", "16:40", "17:00", "17:20", "17:40", "18:00", "18:20", "18:40", "19:00", "19:20", "19:40", "20:00", "20:20", "20:40", "21:00", "21:20", "21:40", "22:00"]

    let dateFormatter = DateFormatter()

    init() {
        dateFormatter.dateFormat = "HH:mm"
    }

    func getXinYuanBus(_ current: Date, weekday isOnWeekDay: Bool) -> (String?, String?) {
        if isOnWeekDay {
            return getBusSchedule(current, schedule: XinYuan)
        } else {
            return getBusSchedule(current, schedule: XinYuanHoliday)
        }
    }

    func getKeYanLouBus(_ current: Date, weekday isOnWeekDay: Bool) -> (String?, String?) {
        if isOnWeekDay {
            return getBusSchedule(current, schedule: KeYanLou)
        } else {
            return getBusSchedule(current, schedule: KeYanLouHoliday)
        }
    }

    private func getBusSchedule(_ current: Date, schedule: [String]) -> (String?, String?) {
        var previous: String?
        var next: String?
        for time_string in schedule {
            let time = dateFormatter.date(from: time_string)!
            if Time(time) <= Time(current) {
                previous = time_string
            } else {
                next = time_string
                return (previous, next)
            }
        }
        return (previous, next)
    }
}

class Time: Comparable {
    static func <(lhs: Time, rhs: Time) -> Bool {
        lhs.hour == rhs.hour ? lhs.minute < rhs.minute : lhs.hour < rhs.hour
    }

    static func ==(lhs: Time, rhs: Time) -> Bool {
        lhs.hour == rhs.hour && lhs.minute == rhs.minute
    }

    var hour: Int
    var minute: Int

    init(_ date: Date) {
        let calendar = Calendar.current
        let components = calendar.dateComponents([.hour, .minute], from: date)
        self.hour = components.hour!
        self.minute = components.minute!
    }
}


